// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: fuse.proto

package fuse

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortDirection int32

const (
	SortDirection_ASC  SortDirection = 0
	SortDirection_DESC SortDirection = 1
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	SortDirection_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_fuse_proto_enumTypes[0].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_fuse_proto_enumTypes[0]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{0}
}

// a function called over 1 or more rows that creates a new value, usually
// to be put into a new column. the rows this function summarizes may be from
// one of the following sources:
//
//   - a window - in this case, the function will be called in a windowing
//     operation
//   - a group - in this case, the function will be called in an aggregation
//     operation
type Function int32

const (
	Function_SUM        Function = 0
	Function_COUNT      Function = 1
	Function_MIN        Function = 2
	Function_MAX        Function = 3
	Function_FIRST      Function = 4
	Function_LAST       Function = 5
	Function_RANK       Function = 6
	Function_MEAN       Function = 7
	Function_MODE       Function = 8
	Function_ROW_NUMBER Function = 9
)

// Enum value maps for Function.
var (
	Function_name = map[int32]string{
		0: "SUM",
		1: "COUNT",
		2: "MIN",
		3: "MAX",
		4: "FIRST",
		5: "LAST",
		6: "RANK",
		7: "MEAN",
		8: "MODE",
		9: "ROW_NUMBER",
	}
	Function_value = map[string]int32{
		"SUM":        0,
		"COUNT":      1,
		"MIN":        2,
		"MAX":        3,
		"FIRST":      4,
		"LAST":       5,
		"RANK":       6,
		"MEAN":       7,
		"MODE":       8,
		"ROW_NUMBER": 9,
	}
)

func (x Function) Enum() *Function {
	p := new(Function)
	*p = x
	return p
}

func (x Function) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Function) Descriptor() protoreflect.EnumDescriptor {
	return file_fuse_proto_enumTypes[1].Descriptor()
}

func (Function) Type() protoreflect.EnumType {
	return &file_fuse_proto_enumTypes[1]
}

func (x Function) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Function.Descriptor instead.
func (Function) EnumDescriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{1}
}

// used to represent a null value in a row
type NullValue int32

const (
	NullValue_NULL NullValue = 0
)

// Enum value maps for NullValue.
var (
	NullValue_name = map[int32]string{
		0: "NULL",
	}
	NullValue_value = map[string]int32{
		"NULL": 0,
	}
)

func (x NullValue) Enum() *NullValue {
	p := new(NullValue)
	*p = x
	return p
}

func (x NullValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NullValue) Descriptor() protoreflect.EnumDescriptor {
	return file_fuse_proto_enumTypes[2].Descriptor()
}

func (NullValue) Type() protoreflect.EnumType {
	return &file_fuse_proto_enumTypes[2]
}

func (x NullValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NullValue.Descriptor instead.
func (NullValue) EnumDescriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{2}
}

type JoinType int32

const (
	JoinType_INNER JoinType = 0
	JoinType_LEFT  JoinType = 1
	JoinType_RIGHT JoinType = 2
	JoinType_FULL  JoinType = 3
)

// Enum value maps for JoinType.
var (
	JoinType_name = map[int32]string{
		0: "INNER",
		1: "LEFT",
		2: "RIGHT",
		3: "FULL",
	}
	JoinType_value = map[string]int32{
		"INNER": 0,
		"LEFT":  1,
		"RIGHT": 2,
		"FULL":  3,
	}
)

func (x JoinType) Enum() *JoinType {
	p := new(JoinType)
	*p = x
	return p
}

func (x JoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_fuse_proto_enumTypes[3].Descriptor()
}

func (JoinType) Type() protoreflect.EnumType {
	return &file_fuse_proto_enumTypes[3]
}

func (x JoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinType.Descriptor instead.
func (JoinType) EnumDescriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{3}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{0}
}

type ExecuteSqlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionUid string `protobuf:"bytes,1,opt,name=session_uid,json=sessionUid,proto3" json:"session_uid,omitempty"`
	Query      string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ExecuteSqlRequest) Reset() {
	*x = ExecuteSqlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteSqlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSqlRequest) ProtoMessage() {}

func (x *ExecuteSqlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSqlRequest.ProtoReflect.Descriptor instead.
func (*ExecuteSqlRequest) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{1}
}

func (x *ExecuteSqlRequest) GetSessionUid() string {
	if x != nil {
		return x.SessionUid
	}
	return ""
}

func (x *ExecuteSqlRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type SessionUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionUid string `protobuf:"bytes,1,opt,name=session_uid,json=sessionUid,proto3" json:"session_uid,omitempty"`
}

func (x *SessionUID) Reset() {
	*x = SessionUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUID) ProtoMessage() {}

func (x *SessionUID) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUID.ProtoReflect.Descriptor instead.
func (*SessionUID) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{2}
}

func (x *SessionUID) GetSessionUid() string {
	if x != nil {
		return x.SessionUid
	}
	return ""
}

type DataFrameUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataframeUid string `protobuf:"bytes,1,opt,name=dataframe_uid,json=dataframeUid,proto3" json:"dataframe_uid,omitempty"`
}

func (x *DataFrameUID) Reset() {
	*x = DataFrameUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFrameUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFrameUID) ProtoMessage() {}

func (x *DataFrameUID) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFrameUID.ProtoReflect.Descriptor instead.
func (*DataFrameUID) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{3}
}

func (x *DataFrameUID) GetDataframeUid() string {
	if x != nil {
		return x.DataframeUid
	}
	return ""
}

type SaveDataFrameAsTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataframeUid string `protobuf:"bytes,1,opt,name=dataframe_uid,json=dataframeUid,proto3" json:"dataframe_uid,omitempty"`
	TableName    string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *SaveDataFrameAsTableRequest) Reset() {
	*x = SaveDataFrameAsTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveDataFrameAsTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveDataFrameAsTableRequest) ProtoMessage() {}

func (x *SaveDataFrameAsTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveDataFrameAsTableRequest.ProtoReflect.Descriptor instead.
func (*SaveDataFrameAsTableRequest) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{4}
}

func (x *SaveDataFrameAsTableRequest) GetDataframeUid() string {
	if x != nil {
		return x.DataframeUid
	}
	return ""
}

func (x *SaveDataFrameAsTableRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type LoadFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Source    string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *LoadFileRequest) Reset() {
	*x = LoadFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadFileRequest) ProtoMessage() {}

func (x *LoadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadFileRequest.ProtoReflect.Descriptor instead.
func (*LoadFileRequest) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{5}
}

func (x *LoadFileRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *LoadFileRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type PrettyPrintDataframeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *PrettyPrintDataframeResponse) Reset() {
	*x = PrettyPrintDataframeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrettyPrintDataframeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrettyPrintDataframeResponse) ProtoMessage() {}

func (x *PrettyPrintDataframeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrettyPrintDataframeResponse.ProtoReflect.Descriptor instead.
func (*PrettyPrintDataframeResponse) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{6}
}

func (x *PrettyPrintDataframeResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// limit a dataframe to fields in the range [start, end)
//
// (includes start but not end)
type LimitDataFrameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataframeUid string `protobuf:"bytes,1,opt,name=dataframe_uid,json=dataframeUid,proto3" json:"dataframe_uid,omitempty"`
	Start        uint64 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End          uint64 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *LimitDataFrameRequest) Reset() {
	*x = LimitDataFrameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitDataFrameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitDataFrameRequest) ProtoMessage() {}

func (x *LimitDataFrameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitDataFrameRequest.ProtoReflect.Descriptor instead.
func (*LimitDataFrameRequest) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{7}
}

func (x *LimitDataFrameRequest) GetDataframeUid() string {
	if x != nil {
		return x.DataframeUid
	}
	return ""
}

func (x *LimitDataFrameRequest) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *LimitDataFrameRequest) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

type CSVOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *CSVOutput) Reset() {
	*x = CSVOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVOutput) ProtoMessage() {}

func (x *CSVOutput) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVOutput.ProtoReflect.Descriptor instead.
func (*CSVOutput) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{8}
}

func (x *CSVOutput) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type SortDataFrameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataframeUid string        `protobuf:"bytes,1,opt,name=dataframe_uid,json=dataframeUid,proto3" json:"dataframe_uid,omitempty"`
	Columns      []*SortColumn `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *SortDataFrameRequest) Reset() {
	*x = SortDataFrameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortDataFrameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortDataFrameRequest) ProtoMessage() {}

func (x *SortDataFrameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortDataFrameRequest.ProtoReflect.Descriptor instead.
func (*SortDataFrameRequest) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{9}
}

func (x *SortDataFrameRequest) GetDataframeUid() string {
	if x != nil {
		return x.DataframeUid
	}
	return ""
}

func (x *SortDataFrameRequest) GetColumns() []*SortColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

type FilterCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left     string `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Right    string `protobuf:"bytes,3,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *FilterCondition) Reset() {
	*x = FilterCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCondition) ProtoMessage() {}

func (x *FilterCondition) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCondition.ProtoReflect.Descriptor instead.
func (*FilterCondition) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{10}
}

func (x *FilterCondition) GetLeft() string {
	if x != nil {
		return x.Left
	}
	return ""
}

func (x *FilterCondition) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *FilterCondition) GetRight() string {
	if x != nil {
		return x.Right
	}
	return ""
}

type FilterDataFrameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataframeUid string             `protobuf:"bytes,1,opt,name=dataframe_uid,json=dataframeUid,proto3" json:"dataframe_uid,omitempty"`
	Conditions   []*FilterCondition `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *FilterDataFrameRequest) Reset() {
	*x = FilterDataFrameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterDataFrameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterDataFrameRequest) ProtoMessage() {}

func (x *FilterDataFrameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterDataFrameRequest.ProtoReflect.Descriptor instead.
func (*FilterDataFrameRequest) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{11}
}

func (x *FilterDataFrameRequest) GetDataframeUid() string {
	if x != nil {
		return x.DataframeUid
	}
	return ""
}

func (x *FilterDataFrameRequest) GetConditions() []*FilterCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type AggregateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataframeUid string    `protobuf:"bytes,1,opt,name=dataframe_uid,json=dataframeUid,proto3" json:"dataframe_uid,omitempty"`
	GroupBy      []string  `protobuf:"bytes,2,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Cols         []*Column `protobuf:"bytes,3,rep,name=cols,proto3" json:"cols,omitempty"`
}

func (x *AggregateRequest) Reset() {
	*x = AggregateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateRequest) ProtoMessage() {}

func (x *AggregateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateRequest.ProtoReflect.Descriptor instead.
func (*AggregateRequest) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{12}
}

func (x *AggregateRequest) GetDataframeUid() string {
	if x != nil {
		return x.DataframeUid
	}
	return ""
}

func (x *AggregateRequest) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *AggregateRequest) GetCols() []*Column {
	if x != nil {
		return x.Cols
	}
	return nil
}

type SortColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColName   string        `protobuf:"bytes,1,opt,name=col_name,json=colName,proto3" json:"col_name,omitempty"`
	Direction SortDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=sds.SortDirection" json:"direction,omitempty"`
}

func (x *SortColumn) Reset() {
	*x = SortColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortColumn) ProtoMessage() {}

func (x *SortColumn) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortColumn.ProtoReflect.Descriptor instead.
func (*SortColumn) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{13}
}

func (x *SortColumn) GetColName() string {
	if x != nil {
		return x.ColName
	}
	return ""
}

func (x *SortColumn) GetDirection() SortDirection {
	if x != nil {
		return x.Direction
	}
	return SortDirection_ASC
}

type WithColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the DataFrame from which to compute the new column
	DataframeUid string `protobuf:"bytes,1,opt,name=dataframe_uid,json=dataframeUid,proto3" json:"dataframe_uid,omitempty"`
	// The name of the new column
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// the new column to create
	NewCol *Column `protobuf:"bytes,3,opt,name=new_col,json=newCol,proto3" json:"new_col,omitempty"`
}

func (x *WithColumnRequest) Reset() {
	*x = WithColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithColumnRequest) ProtoMessage() {}

func (x *WithColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithColumnRequest.ProtoReflect.Descriptor instead.
func (*WithColumnRequest) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{14}
}

func (x *WithColumnRequest) GetDataframeUid() string {
	if x != nil {
		return x.DataframeUid
	}
	return ""
}

func (x *WithColumnRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WithColumnRequest) GetNewCol() *Column {
	if x != nil {
		return x.NewCol
	}
	return nil
}

type WindowSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionBy *string `protobuf:"bytes,1,opt,name=partition_by,json=partitionBy,proto3,oneof" json:"partition_by,omitempty"`
	OrderBy     *string `protobuf:"bytes,2,opt,name=order_by,json=orderBy,proto3,oneof" json:"order_by,omitempty"`
	// The left boundary of this window spec. Passing None here indicates
	// the left side of the window is unbounded.
	LeftBoundary *int64 `protobuf:"varint,3,opt,name=left_boundary,json=leftBoundary,proto3,oneof" json:"left_boundary,omitempty"`
	// The right boundary of this window spec. Passing None here indicates
	// the right side of the window is unbounded.
	RightBoundary *int64 `protobuf:"varint,4,opt,name=right_boundary,json=rightBoundary,proto3,oneof" json:"right_boundary,omitempty"`
	// true if `left_boundary` and `right_boundary` specify a range of
	// values, rather than rows. false otherwise
	IsRange bool `protobuf:"varint,5,opt,name=is_range,json=isRange,proto3" json:"is_range,omitempty"`
}

func (x *WindowSpec) Reset() {
	*x = WindowSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowSpec) ProtoMessage() {}

func (x *WindowSpec) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowSpec.ProtoReflect.Descriptor instead.
func (*WindowSpec) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{15}
}

func (x *WindowSpec) GetPartitionBy() string {
	if x != nil && x.PartitionBy != nil {
		return *x.PartitionBy
	}
	return ""
}

func (x *WindowSpec) GetOrderBy() string {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return ""
}

func (x *WindowSpec) GetLeftBoundary() int64 {
	if x != nil && x.LeftBoundary != nil {
		return *x.LeftBoundary
	}
	return 0
}

func (x *WindowSpec) GetRightBoundary() int64 {
	if x != nil && x.RightBoundary != nil {
		return *x.RightBoundary
	}
	return 0
}

func (x *WindowSpec) GetIsRange() bool {
	if x != nil {
		return x.IsRange
	}
	return false
}

// the data in a single DataFrame row, including the column names.
//
// we purposely do not deduplicate column names in case a set of rows
// have heterogenous data
type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]*Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{16}
}

func (x *Row) GetData() map[string]*Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Value_StringValue
	//	*Value_Int64Value
	//	*Value_Int32Value
	//	*Value_BytesValue
	//	*Value_NullValue
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{17}
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetStringValue() string {
	if x, ok := x.GetValue().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Value) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*Value_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *Value) GetInt32Value() int32 {
	if x, ok := x.GetValue().(*Value_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *Value) GetBytesValue() []byte {
	if x, ok := x.GetValue().(*Value_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (x *Value) GetNullValue() NullValue {
	if x, ok := x.GetValue().(*Value_NullValue); ok {
		return x.NullValue
	}
	return NullValue_NULL
}

type isValue_Value interface {
	isValue_Value()
}

type Value_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Value_Int64Value struct {
	Int64Value int64 `protobuf:"varint,2,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type Value_Int32Value struct {
	Int32Value int32 `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type Value_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,4,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

type Value_NullValue struct {
	NullValue NullValue `protobuf:"varint,5,opt,name=null_value,json=nullValue,proto3,enum=sds.NullValue,oneof"`
}

func (*Value_StringValue) isValue_Value() {}

func (*Value_Int64Value) isValue_Value() {}

func (*Value_Int32Value) isValue_Value() {}

func (*Value_BytesValue) isValue_Value() {}

func (*Value_NullValue) isValue_Value() {}

type DataFrameContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*Row `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *DataFrameContents) Reset() {
	*x = DataFrameContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFrameContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFrameContents) ProtoMessage() {}

func (x *DataFrameContents) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFrameContents.ProtoReflect.Descriptor instead.
func (*DataFrameContents) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{18}
}

func (x *DataFrameContents) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

type SelectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DfUid   string    `protobuf:"bytes,1,opt,name=df_uid,json=dfUid,proto3" json:"df_uid,omitempty"`
	Columns []*Column `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *SelectRequest) Reset() {
	*x = SelectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectRequest) ProtoMessage() {}

func (x *SelectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectRequest.ProtoReflect.Descriptor instead.
func (*SelectRequest) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{19}
}

func (x *SelectRequest) GetDfUid() string {
	if x != nil {
		return x.DfUid
	}
	return ""
}

func (x *SelectRequest) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

// The definition of a column in Fuse.
//
// This is either a reference to an existing column or a specification
// for how to compute a new column, possibly from an existing column.
type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ColSpec:
	//
	//	*Column_ColName
	//	*Column_ColDerived
	//	*Column_ColLit
	//	*Column_ColCoalesce
	//	*Column_ColFunctional
	ColSpec isColumn_ColSpec `protobuf_oneof:"col_spec"`
	Window  *WindowSpec      `protobuf:"bytes,6,opt,name=window,proto3,oneof" json:"window,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{20}
}

func (m *Column) GetColSpec() isColumn_ColSpec {
	if m != nil {
		return m.ColSpec
	}
	return nil
}

func (x *Column) GetColName() string {
	if x, ok := x.GetColSpec().(*Column_ColName); ok {
		return x.ColName
	}
	return ""
}

func (x *Column) GetColDerived() *NamedDerivedColumn {
	if x, ok := x.GetColSpec().(*Column_ColDerived); ok {
		return x.ColDerived
	}
	return nil
}

func (x *Column) GetColLit() *LiteralColumn {
	if x, ok := x.GetColSpec().(*Column_ColLit); ok {
		return x.ColLit
	}
	return nil
}

func (x *Column) GetColCoalesce() *CoalesceColumn {
	if x, ok := x.GetColSpec().(*Column_ColCoalesce); ok {
		return x.ColCoalesce
	}
	return nil
}

func (x *Column) GetColFunctional() *FunctionalColumn {
	if x, ok := x.GetColSpec().(*Column_ColFunctional); ok {
		return x.ColFunctional
	}
	return nil
}

func (x *Column) GetWindow() *WindowSpec {
	if x != nil {
		return x.Window
	}
	return nil
}

type isColumn_ColSpec interface {
	isColumn_ColSpec()
}

type Column_ColName struct {
	ColName string `protobuf:"bytes,1,opt,name=col_name,json=colName,proto3,oneof"`
}

type Column_ColDerived struct {
	ColDerived *NamedDerivedColumn `protobuf:"bytes,2,opt,name=col_derived,json=colDerived,proto3,oneof"`
}

type Column_ColLit struct {
	ColLit *LiteralColumn `protobuf:"bytes,3,opt,name=col_lit,json=colLit,proto3,oneof"`
}

type Column_ColCoalesce struct {
	ColCoalesce *CoalesceColumn `protobuf:"bytes,4,opt,name=col_coalesce,json=colCoalesce,proto3,oneof"`
}

type Column_ColFunctional struct {
	// calling a function over 1 or more existing columns to make
	// a new column.
	//
	// this Column type is very versatile. many, but not all functions
	// are aggregation functions or window functions. aggregations are
	// handled with the `AggregationRequest` message, so the primary uses
	// of this column type are as follows:
	//
	//  1. an aggregation over the entire DataFrame (i.e. there is only
	//     one group)
	//  2. a window function
	//
	// if option (2) is intended, then the below window parameter must
	// be passed
	ColFunctional *FunctionalColumn `protobuf:"bytes,5,opt,name=col_functional,json=colFunctional,proto3,oneof"`
}

func (*Column_ColName) isColumn_ColSpec() {}

func (*Column_ColDerived) isColumn_ColSpec() {}

func (*Column_ColLit) isColumn_ColSpec() {}

func (*Column_ColCoalesce) isColumn_ColSpec() {}

func (*Column_ColFunctional) isColumn_ColSpec() {}

// A new column that is derived by performing a binary operation
// on an existing column with a constant. for example:
//
//	existing_col + 2
//
// The following expression would _not_ be supported by
// ConstBinaryOpDerivedColumn
//
//	existing_col + other_existing_col
//
// because this is not an expression representing an existing column with a
// binary operation applied to a constant (it's applied to a 2nd existing
// column)
type NamedDerivedColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcCol   string `protobuf:"bytes,1,opt,name=src_col,json=srcCol,proto3" json:"src_col,omitempty"`
	NewCol   string `protobuf:"bytes,2,opt,name=new_col,json=newCol,proto3" json:"new_col,omitempty"`
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	// Types that are assignable to Constant:
	//
	//	*NamedDerivedColumn_StrVal
	//	*NamedDerivedColumn_I32Val
	//	*NamedDerivedColumn_I64Val
	Constant isNamedDerivedColumn_Constant `protobuf_oneof:"constant"`
}

func (x *NamedDerivedColumn) Reset() {
	*x = NamedDerivedColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedDerivedColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedDerivedColumn) ProtoMessage() {}

func (x *NamedDerivedColumn) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedDerivedColumn.ProtoReflect.Descriptor instead.
func (*NamedDerivedColumn) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{21}
}

func (x *NamedDerivedColumn) GetSrcCol() string {
	if x != nil {
		return x.SrcCol
	}
	return ""
}

func (x *NamedDerivedColumn) GetNewCol() string {
	if x != nil {
		return x.NewCol
	}
	return ""
}

func (x *NamedDerivedColumn) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (m *NamedDerivedColumn) GetConstant() isNamedDerivedColumn_Constant {
	if m != nil {
		return m.Constant
	}
	return nil
}

func (x *NamedDerivedColumn) GetStrVal() string {
	if x, ok := x.GetConstant().(*NamedDerivedColumn_StrVal); ok {
		return x.StrVal
	}
	return ""
}

func (x *NamedDerivedColumn) GetI32Val() int32 {
	if x, ok := x.GetConstant().(*NamedDerivedColumn_I32Val); ok {
		return x.I32Val
	}
	return 0
}

func (x *NamedDerivedColumn) GetI64Val() int64 {
	if x, ok := x.GetConstant().(*NamedDerivedColumn_I64Val); ok {
		return x.I64Val
	}
	return 0
}

type isNamedDerivedColumn_Constant interface {
	isNamedDerivedColumn_Constant()
}

type NamedDerivedColumn_StrVal struct {
	StrVal string `protobuf:"bytes,4,opt,name=str_val,json=strVal,proto3,oneof"`
}

type NamedDerivedColumn_I32Val struct {
	I32Val int32 `protobuf:"varint,5,opt,name=i32_val,json=i32Val,proto3,oneof"`
}

type NamedDerivedColumn_I64Val struct {
	I64Val int64 `protobuf:"varint,6,opt,name=i64_val,json=i64Val,proto3,oneof"`
}

func (*NamedDerivedColumn_StrVal) isNamedDerivedColumn_Constant() {}

func (*NamedDerivedColumn_I32Val) isNamedDerivedColumn_Constant() {}

func (*NamedDerivedColumn_I64Val) isNamedDerivedColumn_Constant() {}

type TypedAny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*TypedAny_StrVal
	//	*TypedAny_I32Val
	//	*TypedAny_I64Val
	Value isTypedAny_Value `protobuf_oneof:"value"`
}

func (x *TypedAny) Reset() {
	*x = TypedAny{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypedAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypedAny) ProtoMessage() {}

func (x *TypedAny) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypedAny.ProtoReflect.Descriptor instead.
func (*TypedAny) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{22}
}

func (m *TypedAny) GetValue() isTypedAny_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *TypedAny) GetStrVal() string {
	if x, ok := x.GetValue().(*TypedAny_StrVal); ok {
		return x.StrVal
	}
	return ""
}

func (x *TypedAny) GetI32Val() string {
	if x, ok := x.GetValue().(*TypedAny_I32Val); ok {
		return x.I32Val
	}
	return ""
}

func (x *TypedAny) GetI64Val() string {
	if x, ok := x.GetValue().(*TypedAny_I64Val); ok {
		return x.I64Val
	}
	return ""
}

type isTypedAny_Value interface {
	isTypedAny_Value()
}

type TypedAny_StrVal struct {
	StrVal string `protobuf:"bytes,1,opt,name=str_val,json=strVal,proto3,oneof"`
}

type TypedAny_I32Val struct {
	I32Val string `protobuf:"bytes,2,opt,name=i32_val,json=i32Val,proto3,oneof"`
}

type TypedAny_I64Val struct {
	I64Val string `protobuf:"bytes,3,opt,name=i64_val,json=i64Val,proto3,oneof"`
}

func (*TypedAny_StrVal) isTypedAny_Value() {}

func (*TypedAny_I32Val) isTypedAny_Value() {}

func (*TypedAny_I64Val) isTypedAny_Value() {}

type LiteralColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Val  *TypedAny `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *LiteralColumn) Reset() {
	*x = LiteralColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiteralColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiteralColumn) ProtoMessage() {}

func (x *LiteralColumn) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiteralColumn.ProtoReflect.Descriptor instead.
func (*LiteralColumn) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{23}
}

func (x *LiteralColumn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LiteralColumn) GetVal() *TypedAny {
	if x != nil {
		return x.Val
	}
	return nil
}

// A new column that is created from choosing the first non-null value from
// one or more columns in a row.
type CoalesceColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the new column
	Name string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cols []string `protobuf:"bytes,2,rep,name=cols,proto3" json:"cols,omitempty"`
}

func (x *CoalesceColumn) Reset() {
	*x = CoalesceColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoalesceColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoalesceColumn) ProtoMessage() {}

func (x *CoalesceColumn) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoalesceColumn.ProtoReflect.Descriptor instead.
func (*CoalesceColumn) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{24}
}

func (x *CoalesceColumn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoalesceColumn) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

type FunctionalColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the new column
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the function to call over the window
	Function Function `protobuf:"varint,2,opt,name=function,proto3,enum=sds.Function" json:"function,omitempty"`
	// the parameters to pass to the function call
	Params []string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *FunctionalColumn) Reset() {
	*x = FunctionalColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionalColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionalColumn) ProtoMessage() {}

func (x *FunctionalColumn) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionalColumn.ProtoReflect.Descriptor instead.
func (*FunctionalColumn) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{25}
}

func (x *FunctionalColumn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionalColumn) GetFunction() Function {
	if x != nil {
		return x.Function
	}
	return Function_SUM
}

func (x *FunctionalColumn) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

type DropRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DfUid    string   `protobuf:"bytes,1,opt,name=df_uid,json=dfUid,proto3" json:"df_uid,omitempty"`
	ColNames []string `protobuf:"bytes,2,rep,name=col_names,json=colNames,proto3" json:"col_names,omitempty"`
}

func (x *DropRequest) Reset() {
	*x = DropRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropRequest) ProtoMessage() {}

func (x *DropRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropRequest.ProtoReflect.Descriptor instead.
func (*DropRequest) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{26}
}

func (x *DropRequest) GetDfUid() string {
	if x != nil {
		return x.DfUid
	}
	return ""
}

func (x *DropRequest) GetColNames() []string {
	if x != nil {
		return x.ColNames
	}
	return nil
}

type JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DfUid_1   string   `protobuf:"bytes,1,opt,name=df_uid_1,json=dfUid1,proto3" json:"df_uid_1,omitempty"`
	DfUid_2   string   `protobuf:"bytes,2,opt,name=df_uid_2,json=dfUid2,proto3" json:"df_uid_2,omitempty"`
	JoinType  JoinType `protobuf:"varint,3,opt,name=join_type,json=joinType,proto3,enum=sds.JoinType" json:"join_type,omitempty"`
	LeftCols  []string `protobuf:"bytes,4,rep,name=left_cols,json=leftCols,proto3" json:"left_cols,omitempty"`
	RightCols []string `protobuf:"bytes,5,rep,name=right_cols,json=rightCols,proto3" json:"right_cols,omitempty"`
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{27}
}

func (x *JoinRequest) GetDfUid_1() string {
	if x != nil {
		return x.DfUid_1
	}
	return ""
}

func (x *JoinRequest) GetDfUid_2() string {
	if x != nil {
		return x.DfUid_2
	}
	return ""
}

func (x *JoinRequest) GetJoinType() JoinType {
	if x != nil {
		return x.JoinType
	}
	return JoinType_INNER
}

func (x *JoinRequest) GetLeftCols() []string {
	if x != nil {
		return x.LeftCols
	}
	return nil
}

func (x *JoinRequest) GetRightCols() []string {
	if x != nil {
		return x.RightCols
	}
	return nil
}

type UnionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DfUid_1 string `protobuf:"bytes,1,opt,name=df_uid_1,json=dfUid1,proto3" json:"df_uid_1,omitempty"`
	DfUid_2 string `protobuf:"bytes,2,opt,name=df_uid_2,json=dfUid2,proto3" json:"df_uid_2,omitempty"`
}

func (x *UnionRequest) Reset() {
	*x = UnionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuse_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionRequest) ProtoMessage() {}

func (x *UnionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuse_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionRequest.ProtoReflect.Descriptor instead.
func (*UnionRequest) Descriptor() ([]byte, []int) {
	return file_fuse_proto_rawDescGZIP(), []int{28}
}

func (x *UnionRequest) GetDfUid_1() string {
	if x != nil {
		return x.DfUid_1
	}
	return ""
}

func (x *UnionRequest) GetDfUid_2() string {
	if x != nil {
		return x.DfUid_2
	}
	return ""
}

var File_fuse_proto protoreflect.FileDescriptor

var file_fuse_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x73, 0x64,
	0x73, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4a, 0x0a, 0x11, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x2d, 0x0a, 0x0a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x55, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x1b, 0x53, 0x61,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a,
	0x0f, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x38, 0x0a, 0x1c, 0x50, 0x72, 0x65, 0x74, 0x74,
	0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x64, 0x0a, 0x15, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x25, 0x0a, 0x09, 0x43, 0x53, 0x56, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x66,
	0x0a, 0x14, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73,
	0x64, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x57, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x73, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x64, 0x12, 0x34,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x73, 0x0a, 0x10, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x22, 0x59, 0x0a, 0x0a, 0x53, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x06, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x22, 0x88, 0x02, 0x0a, 0x0a, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x03, 0x52, 0x0d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x22, 0x72, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x52,
	0x6f, 0x77, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x43, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcf, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2f, 0x0a, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x31, 0x0a, 0x11, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c,
	0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x73,
	0x64, 0x73, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x4d, 0x0a, 0x0d,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x64, 0x66, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x66, 0x55, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xcf, 0x02, 0x0a, 0x06,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1b, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x4c, 0x69, 0x74, 0x12, 0x38,
	0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x43, 0x6f, 0x61, 0x6c, 0x65,
	0x73, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x43, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x5f,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x48, 0x01, 0x52, 0x06, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0xbf, 0x01,
	0x0a, 0x12, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6c, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x19, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x19, 0x0a,
	0x07, 0x69, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x06, 0x69, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x07, 0x69, 0x36, 0x34, 0x5f,
	0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x69, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x22,
	0x64, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x64, 0x41, 0x6e, 0x79, 0x12, 0x19, 0x0a, 0x07, 0x73,
	0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x07, 0x69, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x69, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x12, 0x19, 0x0a, 0x07, 0x69, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x69, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x0d, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x64, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x38, 0x0a, 0x0e, 0x43,
	0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x6c, 0x73, 0x22, 0x69, 0x0a, 0x10, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x41, 0x0a, 0x0b, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x64, 0x66, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x66, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x64, 0x66, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x66, 0x55, 0x69, 0x64, 0x31, 0x12, 0x18, 0x0a,
	0x08, 0x64, 0x66, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x66, 0x55, 0x69, 0x64, 0x32, 0x12, 0x2a, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x64, 0x73,
	0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x73, 0x22,
	0x42, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x08, 0x64, 0x66, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x66, 0x55, 0x69, 0x64, 0x31, 0x12, 0x18, 0x0a, 0x08, 0x64, 0x66, 0x5f,
	0x75, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x66, 0x55,
	0x69, 0x64, 0x32, 0x2a, 0x22, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x2a, 0x73, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x52,
	0x53, 0x54, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x05, 0x12, 0x08,
	0x0a, 0x04, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x45, 0x41, 0x4e,
	0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x4f, 0x57, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x09, 0x2a, 0x15, 0x0a, 0x09,
	0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x00, 0x2a, 0x34, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45,
	0x46, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x32, 0x8e, 0x09, 0x0a, 0x03, 0x73, 0x64,
	0x73, 0x12, 0x37, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x12,
	0x16, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x71, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x73, 0x64,
	0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x07, 0x4c, 0x6f, 0x61, 0x64,
	0x43, 0x53, 0x56, 0x12, 0x14, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x0b,
	0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x73, 0x64,
	0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x55, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x08, 0x4c, 0x6f, 0x61, 0x64, 0x4a, 0x53, 0x4f, 0x4e,
	0x12, 0x14, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0e, 0x4c, 0x6f, 0x61,
	0x64, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x64,
	0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x49, 0x44, 0x1a, 0x0a, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x44, 0x0a, 0x14, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x41, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x73, 0x64, 0x73, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x73, 0x64,
	0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x74, 0x74,
	0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x55,
	0x49, 0x44, 0x1a, 0x21, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x50,
	0x72, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x55, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x55, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73,
	0x64, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x49, 0x44, 0x12,
	0x37, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x16, 0x2e,
	0x73, 0x64, 0x73, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x12, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x07, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x12, 0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x55, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2b, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x10, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x08,
	0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x49, 0x44, 0x1a, 0x11, 0x2e, 0x73, 0x64,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x49, 0x44, 0x12, 0x2d,
	0x0a, 0x05, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x64, 0x73,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a,
	0x04, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x10, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x44, 0x72, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x09, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x53, 0x56, 0x12, 0x11, 0x2e, 0x73, 0x64, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x49, 0x44, 0x1a, 0x0e, 0x2e, 0x73, 0x64, 0x73,
	0x2e, 0x43, 0x53, 0x56, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x1d, 0x5a, 0x1b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x66, 0x75, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_fuse_proto_rawDescOnce sync.Once
	file_fuse_proto_rawDescData = file_fuse_proto_rawDesc
)

func file_fuse_proto_rawDescGZIP() []byte {
	file_fuse_proto_rawDescOnce.Do(func() {
		file_fuse_proto_rawDescData = protoimpl.X.CompressGZIP(file_fuse_proto_rawDescData)
	})
	return file_fuse_proto_rawDescData
}

var file_fuse_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_fuse_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_fuse_proto_goTypes = []interface{}{
	(SortDirection)(0),                   // 0: sds.SortDirection
	(Function)(0),                        // 1: sds.Function
	(NullValue)(0),                       // 2: sds.NullValue
	(JoinType)(0),                        // 3: sds.JoinType
	(*Empty)(nil),                        // 4: sds.Empty
	(*ExecuteSqlRequest)(nil),            // 5: sds.ExecuteSqlRequest
	(*SessionUID)(nil),                   // 6: sds.SessionUID
	(*DataFrameUID)(nil),                 // 7: sds.DataFrameUID
	(*SaveDataFrameAsTableRequest)(nil),  // 8: sds.SaveDataFrameAsTableRequest
	(*LoadFileRequest)(nil),              // 9: sds.LoadFileRequest
	(*PrettyPrintDataframeResponse)(nil), // 10: sds.PrettyPrintDataframeResponse
	(*LimitDataFrameRequest)(nil),        // 11: sds.LimitDataFrameRequest
	(*CSVOutput)(nil),                    // 12: sds.CSVOutput
	(*SortDataFrameRequest)(nil),         // 13: sds.SortDataFrameRequest
	(*FilterCondition)(nil),              // 14: sds.FilterCondition
	(*FilterDataFrameRequest)(nil),       // 15: sds.FilterDataFrameRequest
	(*AggregateRequest)(nil),             // 16: sds.AggregateRequest
	(*SortColumn)(nil),                   // 17: sds.SortColumn
	(*WithColumnRequest)(nil),            // 18: sds.WithColumnRequest
	(*WindowSpec)(nil),                   // 19: sds.WindowSpec
	(*Row)(nil),                          // 20: sds.Row
	(*Value)(nil),                        // 21: sds.Value
	(*DataFrameContents)(nil),            // 22: sds.DataFrameContents
	(*SelectRequest)(nil),                // 23: sds.SelectRequest
	(*Column)(nil),                       // 24: sds.Column
	(*NamedDerivedColumn)(nil),           // 25: sds.NamedDerivedColumn
	(*TypedAny)(nil),                     // 26: sds.TypedAny
	(*LiteralColumn)(nil),                // 27: sds.LiteralColumn
	(*CoalesceColumn)(nil),               // 28: sds.CoalesceColumn
	(*FunctionalColumn)(nil),             // 29: sds.FunctionalColumn
	(*DropRequest)(nil),                  // 30: sds.DropRequest
	(*JoinRequest)(nil),                  // 31: sds.JoinRequest
	(*UnionRequest)(nil),                 // 32: sds.UnionRequest
	nil,                                  // 33: sds.Row.DataEntry
}
var file_fuse_proto_depIdxs = []int32{
	17, // 0: sds.SortDataFrameRequest.columns:type_name -> sds.SortColumn
	14, // 1: sds.FilterDataFrameRequest.conditions:type_name -> sds.FilterCondition
	24, // 2: sds.AggregateRequest.cols:type_name -> sds.Column
	0,  // 3: sds.SortColumn.direction:type_name -> sds.SortDirection
	24, // 4: sds.WithColumnRequest.new_col:type_name -> sds.Column
	33, // 5: sds.Row.data:type_name -> sds.Row.DataEntry
	2,  // 6: sds.Value.null_value:type_name -> sds.NullValue
	20, // 7: sds.DataFrameContents.rows:type_name -> sds.Row
	24, // 8: sds.SelectRequest.columns:type_name -> sds.Column
	25, // 9: sds.Column.col_derived:type_name -> sds.NamedDerivedColumn
	27, // 10: sds.Column.col_lit:type_name -> sds.LiteralColumn
	28, // 11: sds.Column.col_coalesce:type_name -> sds.CoalesceColumn
	29, // 12: sds.Column.col_functional:type_name -> sds.FunctionalColumn
	19, // 13: sds.Column.window:type_name -> sds.WindowSpec
	26, // 14: sds.LiteralColumn.val:type_name -> sds.TypedAny
	1,  // 15: sds.FunctionalColumn.function:type_name -> sds.Function
	3,  // 16: sds.JoinRequest.join_type:type_name -> sds.JoinType
	21, // 17: sds.Row.DataEntry.value:type_name -> sds.Value
	5,  // 18: sds.sds.ExecuteSql:input_type -> sds.ExecuteSqlRequest
	4,  // 19: sds.sds.CreateSession:input_type -> sds.Empty
	9,  // 20: sds.sds.LoadCSV:input_type -> sds.LoadFileRequest
	9,  // 21: sds.sds.LoadParquet:input_type -> sds.LoadFileRequest
	9,  // 22: sds.sds.LoadJSON:input_type -> sds.LoadFileRequest
	9,  // 23: sds.sds.LoadDeltaTable:input_type -> sds.LoadFileRequest
	6,  // 24: sds.sds.CloseSession:input_type -> sds.SessionUID
	8,  // 25: sds.sds.SaveDataFrameAsTable:input_type -> sds.SaveDataFrameAsTableRequest
	7,  // 26: sds.sds.PrettyPrintDataframe:input_type -> sds.DataFrameUID
	11, // 27: sds.sds.LimitDataFrame:input_type -> sds.LimitDataFrameRequest
	13, // 28: sds.sds.SortDataFrame:input_type -> sds.SortDataFrameRequest
	15, // 29: sds.sds.FilterDataFrame:input_type -> sds.FilterDataFrameRequest
	16, // 30: sds.sds.Aggregate:input_type -> sds.AggregateRequest
	18, // 31: sds.sds.WithColumn:input_type -> sds.WithColumnRequest
	23, // 32: sds.sds.Select:input_type -> sds.SelectRequest
	7,  // 33: sds.sds.Collect:input_type -> sds.DataFrameUID
	31, // 34: sds.sds.Join:input_type -> sds.JoinRequest
	7,  // 35: sds.sds.Distinct:input_type -> sds.DataFrameUID
	32, // 36: sds.sds.Union:input_type -> sds.UnionRequest
	30, // 37: sds.sds.Drop:input_type -> sds.DropRequest
	7,  // 38: sds.sds.ExportCSV:input_type -> sds.DataFrameUID
	7,  // 39: sds.sds.ExecuteSql:output_type -> sds.DataFrameUID
	6,  // 40: sds.sds.CreateSession:output_type -> sds.SessionUID
	7,  // 41: sds.sds.LoadCSV:output_type -> sds.DataFrameUID
	7,  // 42: sds.sds.LoadParquet:output_type -> sds.DataFrameUID
	7,  // 43: sds.sds.LoadJSON:output_type -> sds.DataFrameUID
	7,  // 44: sds.sds.LoadDeltaTable:output_type -> sds.DataFrameUID
	4,  // 45: sds.sds.CloseSession:output_type -> sds.Empty
	4,  // 46: sds.sds.SaveDataFrameAsTable:output_type -> sds.Empty
	10, // 47: sds.sds.PrettyPrintDataframe:output_type -> sds.PrettyPrintDataframeResponse
	7,  // 48: sds.sds.LimitDataFrame:output_type -> sds.DataFrameUID
	7,  // 49: sds.sds.SortDataFrame:output_type -> sds.DataFrameUID
	7,  // 50: sds.sds.FilterDataFrame:output_type -> sds.DataFrameUID
	7,  // 51: sds.sds.Aggregate:output_type -> sds.DataFrameUID
	7,  // 52: sds.sds.WithColumn:output_type -> sds.DataFrameUID
	7,  // 53: sds.sds.Select:output_type -> sds.DataFrameUID
	22, // 54: sds.sds.Collect:output_type -> sds.DataFrameContents
	7,  // 55: sds.sds.Join:output_type -> sds.DataFrameUID
	7,  // 56: sds.sds.Distinct:output_type -> sds.DataFrameUID
	7,  // 57: sds.sds.Union:output_type -> sds.DataFrameUID
	7,  // 58: sds.sds.Drop:output_type -> sds.DataFrameUID
	12, // 59: sds.sds.ExportCSV:output_type -> sds.CSVOutput
	39, // [39:60] is the sub-list for method output_type
	18, // [18:39] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_fuse_proto_init() }
func file_fuse_proto_init() {
	if File_fuse_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fuse_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteSqlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataFrameUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveDataFrameAsTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrettyPrintDataframeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitDataFrameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortDataFrameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterDataFrameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataFrameContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedDerivedColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypedAny); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiteralColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoalesceColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionalColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuse_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fuse_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_fuse_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Value_StringValue)(nil),
		(*Value_Int64Value)(nil),
		(*Value_Int32Value)(nil),
		(*Value_BytesValue)(nil),
		(*Value_NullValue)(nil),
	}
	file_fuse_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*Column_ColName)(nil),
		(*Column_ColDerived)(nil),
		(*Column_ColLit)(nil),
		(*Column_ColCoalesce)(nil),
		(*Column_ColFunctional)(nil),
	}
	file_fuse_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*NamedDerivedColumn_StrVal)(nil),
		(*NamedDerivedColumn_I32Val)(nil),
		(*NamedDerivedColumn_I64Val)(nil),
	}
	file_fuse_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*TypedAny_StrVal)(nil),
		(*TypedAny_I32Val)(nil),
		(*TypedAny_I64Val)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fuse_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fuse_proto_goTypes,
		DependencyIndexes: file_fuse_proto_depIdxs,
		EnumInfos:         file_fuse_proto_enumTypes,
		MessageInfos:      file_fuse_proto_msgTypes,
	}.Build()
	File_fuse_proto = out.File
	file_fuse_proto_rawDesc = nil
	file_fuse_proto_goTypes = nil
	file_fuse_proto_depIdxs = nil
}
